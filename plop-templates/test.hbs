import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import "@testing-library/jest-dom";
import {{pascalCase name}} from "../../app/components/{{pascalCase name}}/{{pascalCase name}}";

describe("{{pascalCase name}} Component", () => {
  // Basic rendering test
  it("renders the {{pascalCase name}} component without crashing", () => {
    render(React.createElement({{pascalCase name}}));
    const heading = screen.getByRole("heading", { name: /{{camelCase name}}/i });
    expect(heading).toBeInTheDocument();
  });

  // Snapshot test
  it("matches the snapshot", () => {
    const { asFragment } = render(React.createElement({{pascalCase name}}));
    expect(asFragment()).toMatchSnapshot();
  });

  // Accessibility test
  it("renders an accessible heading", () => {
    render(React.createElement({{pascalCase name}}));
    const heading = screen.getByRole("heading");
    expect(heading).toHaveAccessibleName(/{{camelCase name}}/i);
  });

  // Prop test
  it("renders with the correct prop values", () => {
    const testProp = "Test prop value";
    render(React.createElement({{pascalCase name}}, { title: testProp }));
    const heading = screen.getByText(testProp);
    expect(heading).toBeInTheDocument();
  });

  // Event test (for example, button click)
  it("calls the onClick handler when clicked", () => {
    const onClick = jest.fn();
    render(React.createElement({{pascalCase name}}, { onClick }));
    const button = screen.getByRole("button");
    fireEvent.click(button);
    expect(onClick).toHaveBeenCalledTimes(1);
  });

  // Performance test
  it("does not re-render unnecessarily", () => {
    const { rerender } = render(React.createElement({{pascalCase name}}));
    const initialRender = screen.getByRole("heading");
    rerender(React.createElement({{pascalCase name}}));
    const afterRerender = screen.getByRole("heading");
    expect(initialRender).toBe(afterRerender); // The same heading node should be reused
  });
});
